import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from database.models import Database, init_db, ACCOUNTS_FILE, GROUPS_FILE, POSTS_FILE, SETTINGS_FILE
from utils.session_manager import SessionManager
from utils.posting_manager import PostingManager, PostingPool
from config import BOT_TOKEN, MAX_THREADS, DEFAULT_DELAY, MAX_RETRIES, SESSIONS_DIR
import logging
from loguru import logger
import sys
from datetime import datetime, timedelta
from telethon.tl.functions.channels import GetFullChannelRequest, JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.errors import UserNotParticipantError, InviteHashInvalidError, InviteHashExpiredError, ChannelPrivateError, UserAlreadyParticipantError
from telethon.tl.types import PeerChannel
import time
from typing import Optional
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import re

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(sys.stderr, format="{time} | {level} | {message}")
logger.add(
    "logs/bot_{time}.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    rotation="1 MB",
    compression="zip",
    backtrace=True,
    diagnose=True
)
logger.add(
    "logs/errors_{time}.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    level="ERROR",
    rotation="1 MB",
    compression="zip",
    backtrace=True,
    diagnose=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AccountStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_2fa = State()

class PostStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_media = State()
    waiting_for_schedule = State()
    waiting_for_groups = State()
    waiting_for_accounts = State()
    waiting_for_delay = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    waiting_for_auto_groups = State()
    waiting_for_auto_accounts = State()
    waiting_for_auto_content = State()
    waiting_for_auto_times_count = State()
    waiting_for_auto_time = State()

class SettingsStates(StatesGroup):
    waiting_for_delay = State()
    waiting_for_threads = State()
    waiting_for_retries = State()

class GroupStates(StatesGroup):
    waiting_for_group = State()
    waiting_for_bulk_group_name = State()
    waiting_for_bulk_group_selection = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
session_manager = SessionManager()
posting_pool = PostingPool(max_threads=MAX_THREADS)

def get_main_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = [
        [
            types.KeyboardButton(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"),
            types.KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
        ],
        [
            types.KeyboardButton(text="‚úçÔ∏è –ù–æ–≤—ã–π –ø–æ—Å—Ç"),
            types.KeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç")
        ],
        [
            types.KeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤"),
            types.KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤")
        ],
        [
            types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤"),
            types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        ]
    ]
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∏–Ω–≥–æ–º!\n\n"
        "üîπ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ—Å—Ç—ã\n"
        "üîπ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
        "üîπ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–∞–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("cancel"))
async def cancel_command(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "ü§î –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message(lambda m: m.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def start_add_account(message: types.Message, state: FSMContext):
    await state.set_state(AccountStates.waiting_for_phone)
    await message.answer(
        "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998901234567\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(AccountStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {phone}")
    
    if not phone.startswith('+') or not phone[1:].isdigit():
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: {phone}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79001234567"
        )
        return
    
    await state.update_data(phone=phone)
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
        success, result = await session_manager.create_session(phone)
        
        if result.startswith("CODE_REQUIRED:"):
            phone_code_hash = result.split(":")[1]
            await state.update_data(phone_code_hash=phone_code_hash)
            await state.set_state(AccountStates.waiting_for_code)
            logger.info(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
            await message.answer(
                "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –≤ Telegram –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:"
            )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è {phone}: {result}")
            await state.clear()
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {phone}: {str(e)}")
        await state.clear()
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message(AccountStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    data = await state.get_data()
    phone = data.get("phone")
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
    
    if not code.isdigit():
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}: {code}")
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!")
        return
    
    phone_code_hash = data.get("phone_code_hash")
    logger.debug(f"phone_code_hash –¥–ª—è {phone}: {phone_code_hash}")
    
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–¥–æ–º –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
        success, result = await session_manager.auth_code(phone, code, phone_code_hash=phone_code_hash)
        
        if success:
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}")
            await Database.add_account(phone, result)
            await state.clear()
            await message.answer(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞."
            )
        else:
            if result == "2FA_REQUIRED":
                logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}")
                await state.set_state(AccountStates.waiting_for_2fa)
                await message.answer(
                    "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!\n"
                    "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA:"
                )
            elif result.startswith("CODE_EXPIRED:"):
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π phone_code_hash
                new_phone_code_hash = result.split(":")[1]
                await state.update_data(phone_code_hash=new_phone_code_hash)
                logger.info(f"–ö–æ–¥ –∏—Å—Ç–µ–∫ –¥–ª—è {phone}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π")
                await message.answer(
                    "‚ö†Ô∏è –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫!\n"
                    "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∫–æ–¥.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—à–µ–ª:"
                )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –¥–ª—è {phone}: {result}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –¥–ª—è {phone}: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è 2FA
@dp.message(AccountStates.waiting_for_2fa)
async def process_2fa(message: types.Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    phone = data.get("phone")
    phone_code_hash = data.get("phone_code_hash")
    
    try:
        success, result = await session_manager.auth_code(phone, None, password=password, phone_code_hash=phone_code_hash)
        
        if success:
            await Database.add_account(phone, result)
            await state.clear()
            await message.answer(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞."
            )
        else:
            await state.clear()
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}")
    except Exception as e:
        await state.clear()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è 2FA: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@dp.message(lambda m: m.text == "üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
async def show_accounts_status(message: types.Message):
    try:
        data = await Database._read_json(ACCOUNTS_FILE)
        accounts = data.get("accounts", [])
        
        if not accounts:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π."
            )
            return
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'üü¢' if acc['status'] == 'active' else 'üî¥' if acc['status'] == 'frozen' else '‚õî'} {acc['phone']}", 
                        callback_data=f"account_menu_{acc['id']}"
                    )
                ] for acc in accounts
            ]
        )
        
        status_text = "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:\n\n"
        status_text += "üü¢ - –ê–∫—Ç–∏–≤–µ–Ω\n"
        status_text += "üî¥ - –ó–∞–º–æ—Ä–æ–∂–µ–Ω\n"
        status_text += "‚õî - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
        status_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        
        await message.answer(status_text, reply_markup=keyboard)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith('account_menu_'))
async def account_menu(callback: types.CallbackQuery):
    try:
        account_id = int(callback.data.split('_')[2])
        account = await Database.get_account_by_id(account_id)
        
        if not account:
            await callback.message.edit_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        status_emoji = {
            'active': 'üü¢',
            'frozen': 'üî¥',
            'banned': '‚õî'
        }
        
        status_text = (
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: {account['phone']}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_emoji.get(account['status'], '‚ùì')} {account['status']}\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω: {datetime.fromtimestamp(account['created_at']).strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if account['last_used']:
            status_text += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {datetime.fromtimestamp(account['last_used']).strftime('%d.%m.%Y %H:%M')}\n"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if account['status'] == 'active':
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(
                    text="üî¥ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å",
                    callback_data=f"account_freeze_{account['phone']}"
                )
            ])
        elif account['status'] == 'frozen':
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(
                    text="üü¢ –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å",
                    callback_data=f"account_unfreeze_{account['phone']}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–≥–¥–∞
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                callback_data=f"account_delete_{account['id']}"
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="accounts_list"
            )
        ])
        
        await callback.message.edit_text(status_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith('account_freeze_'))
async def freeze_account(callback: types.CallbackQuery):
    try:
        phone = callback.data.replace('account_freeze_', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        data = await Database._read_json(ACCOUNTS_FILE)
        accounts = data.get("accounts", [])
        account = None
        
        # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç
        for acc in accounts:
            if acc["phone"] == phone:
                account = acc
                break
        
        if not account:
            await callback.message.edit_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await Database.update_account_status(account["id"], "frozen")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
        await account_menu(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith('account_unfreeze_'))
async def unfreeze_account(callback: types.CallbackQuery):
    try:
        phone = callback.data.replace('account_unfreeze_', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        data = await Database._read_json(ACCOUNTS_FILE)
        accounts = data.get("accounts", [])
        account = None
        
        # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç
        for acc in accounts:
            if acc["phone"] == phone:
                account = acc
                break
        
        if not account:
            await callback.message.edit_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await Database.update_account_status(account["id"], "active")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
        await account_menu(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith('account_delete_'))
async def delete_account(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
        parts = callback.data.split('_')
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        if 'confirm' in callback.data:
            # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞
            account_id = int(parts[-1])
            account = await Database.get_account_by_id(account_id)
            
            if not account:
                await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
                
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            session_file = os.path.join(SESSIONS_DIR, f"{account['phone']}.session")
            if os.path.exists(session_file):
                os.remove(session_file)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
                
            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –±–∞–∑—ã
            await Database.delete_account(account_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç {account['phone']} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await callback.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", show_alert=True)
            await callback.message.delete()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts = await Database.get_accounts()
            if not accounts:
                await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return
                
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text=f"{'üü¢' if acc['status'] == 'active' else 'üî¥' if acc['status'] == 'frozen' else '‚õî'} {acc['phone']}", 
                            callback_data=f"account_menu_{acc['id']}"
                        )
                    ] for acc in accounts
                ]
            )
            
            await callback.message.answer(
                "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:\n\n"
                "üü¢ - –ê–∫—Ç–∏–≤–µ–Ω\n"
                "üî¥ - –ó–∞–º–æ—Ä–æ–∂–µ–Ω\n"
                "‚õî - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                reply_markup=keyboard
            )
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        account_id = int(parts[-1])
        account = await Database.get_account_by_id(account_id)
        
        if not account:
            await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"account_delete_confirm_{account_id}"
                    ),
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
                        callback_data=f"account_menu_{account_id}"
                    )
                ]
            ]
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.answer()
        await callback.message.delete()
        await callback.message.answer(
            f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account['phone']}?",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@dp.callback_query(lambda c: c.data == "accounts_list")
async def show_accounts_list(callback: types.CallbackQuery):
    try:
        accounts = await Database.get_accounts()
        
        if not accounts:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return
            
        keyboard = []
        for account in accounts:
            status = "üü¢" if account["status"] == "active" else "üî¥" if account["status"] == "frozen" else "‚õî"
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{status} {account['phone']}",
                    callback_data=f"account_menu_{account['id']}"
                )
            ])
            
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:\n\n"
            "üü¢ - –ê–∫—Ç–∏–≤–µ–Ω\n"
            "üî¥ - –ó–∞–º–æ—Ä–æ–∂–µ–Ω\n"
            "‚õî - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–æ–º
@dp.message(lambda m: m.text == "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–æ–º")
async def posting_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="‚úçÔ∏è –ù–æ–≤—ã–π –ø–æ—Å—Ç"),
                types.KeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç")
            ],
            [
                types.KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"),
                types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–æ–º\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message(lambda m: m.text in ["‚úçÔ∏è –ù–æ–≤—ã–π –ø–æ—Å—Ç", "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"])
async def new_post(message: types.Message, state: FSMContext):
    await state.set_state(PostStates.waiting_for_content)
    await state.update_data(is_scheduled=False)
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.\n"
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel"
    )

@dp.message(PostStates.waiting_for_content)
async def process_post_content(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            'text': message.text,
            'caption': message.caption,
            'message_id': message.message_id,
            'user_id': message.from_user.id
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        if message.photo:
            message_data['photo'] = message.photo[-1].file_id
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ
        if message.video:
            message_data['video'] = message.video.file_id
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        if message.document:
            message_data['document'] = {
                'file_id': message.document.file_id,
                'file_name': message.document.file_name
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(message_data=message_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø
        groups = await Database.get_active_groups()
        bulk_groups = await Database.get_bulk_groups()
        
        if not groups:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            await state.clear()
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞–º–∏
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if bulk_groups:
            keyboard.extend([
                [
                    types.InlineKeyboardButton(
                        text=f"üì¶ {bg['name']} ({len(bg['groups'])} –≥—Ä—É–ø–ø)",
                        callback_data=f"select_bulk_group_post_{bg['id']}"
                    )
                ] for bg in bulk_groups
            ])
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            keyboard.append([
                types.InlineKeyboardButton(
                    text="‚ûñ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã ‚ûñ",
                    callback_data="separator"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        keyboard.extend([
            [
                types.InlineKeyboardButton(
                    text=group['title'],
                    callback_data=f"select_group_{group['id']}"
                )
            ] for group in groups
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard.append([
            types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                callback_data="confirm_groups"
            )
        ])
        
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await state.update_data(selected_groups=[])
        await state.set_state(PostStates.waiting_for_groups)
        await message.answer(
            "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞\n"
            "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞")
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith('select_bulk_group_post_'))
async def select_bulk_group_for_post(callback: types.CallbackQuery, state: FSMContext):
    try:
        bulk_group_id = int(callback.data.split('_')[4])
        bulk_group = await Database.get_bulk_group_by_id(bulk_group_id)
        
        if not bulk_group:
            await callback.answer("‚ùå –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        data = await state.get_data()
        selected_groups = data.get('selected_groups', [])
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø –∏–∑ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã
        bulk_group_ids = [g['id'] for g in bulk_group['groups']]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —ç—Ç–∞ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞
        is_selected = all(g_id in selected_groups for g_id in bulk_group_ids)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø
        bulk_groups = await Database.get_bulk_groups()
        other_bulk_group_ids = []
        for bg in bulk_groups:
            if bg['id'] != bulk_group_id:
                other_bulk_group_ids.extend(g['id'] for g in bg['groups'])
                
        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –æ—Ç –≥—Ä—É–ø–ø –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø
        selected_groups = [g for g in selected_groups if g not in other_bulk_group_ids]
        
        if is_selected:
            # –ï—Å–ª–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ - —É–¥–∞–ª—è–µ–º –µ—ë –≥—Ä—É–ø–ø—ã
            selected_groups = [g for g in selected_groups if g not in bulk_group_ids]
        else:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≥—Ä—É–ø–ø—ã
            for g_id in bulk_group_ids:
                if g_id not in selected_groups:
                    selected_groups.append(g_id)
            
        await state.update_data(selected_groups=selected_groups)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        groups = await Database.get_active_groups()
        
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã
        if bulk_groups:
            keyboard.extend([
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if all(g['id'] in selected_groups for g in bg['groups']) else 'üì¶'} "
                             f"{bg['name']} ({len(bg['groups'])} –≥—Ä—É–ø–ø)",
                        callback_data=f"select_bulk_group_post_{bg['id']}"
                    )
                ] for bg in bulk_groups
            ])
            keyboard.append([
                types.InlineKeyboardButton(
                    text="‚ûñ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã ‚ûñ",
                    callback_data="separator"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        keyboard.extend([
            [
                types.InlineKeyboardButton(
                    text=f"{'‚úÖ' if group['id'] in selected_groups else '‚≠ïÔ∏è'} {group['title']}",
                    callback_data=f"select_group_{group['id']}"
                )
            ] for group in groups
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard.append([
            types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                callback_data="confirm_auto_groups"
            )
        ])
        
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            f"üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_groups)} –≥—Ä—É–ø–ø",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "separator")
async def separator_callback(callback: types.CallbackQuery):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    await callback.answer()

@dp.callback_query(PostStates.waiting_for_groups, lambda c: c.data.startswith('select_group_'))
async def select_group(callback: types.CallbackQuery, state: FSMContext):
    try:
        group_id = int(callback.data.split('_')[2])
        data = await state.get_data()
        selected_groups = data.get('selected_groups', [])
        
        if group_id in selected_groups:
            selected_groups.remove(group_id)
        else:
            selected_groups.append(group_id)
            
        await state.update_data(selected_groups=selected_groups)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        groups = await Database.get_active_groups()
        bulk_groups = await Database.get_bulk_groups()
        
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã
        if bulk_groups:
            keyboard.extend([
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if set([g['id'] for g in bg['groups']]).issubset(set(selected_groups)) else 'üì¶'} "
                             f"{bg['name']} ({len(bg['groups'])} –≥—Ä—É–ø–ø)",
                        callback_data=f"select_bulk_group_post_{bg['id']}"
                    )
                ] for bg in bulk_groups
            ])
            keyboard.append([
                types.InlineKeyboardButton(
                    text="‚ûñ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã ‚ûñ",
                    callback_data="separator"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        keyboard.extend([
            [
                types.InlineKeyboardButton(
                    text=f"{'‚úÖ' if group['id'] in selected_groups else ''}{group['title']}",
                    callback_data=f"select_group_{group['id']}"
                )
            ] for group in groups
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard.append([
            types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                callback_data="confirm_groups"
            )
        ])
        
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            f"üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_groups)} –≥—Ä—É–ø–ø",
            reply_markup=markup
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")
        await state.clear()

@dp.callback_query(PostStates.waiting_for_groups, lambda c: c.data == "confirm_groups")
async def confirm_groups(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_groups = data.get('selected_groups', [])
        
        if not selected_groups:
            await callback.message.edit_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É")
            return
            
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = await Database.get_accounts()
        active_accounts = [acc for acc in accounts if acc['status'] == 'active']
        
        if not active_accounts:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            await state.clear()
            return
            
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=account['phone'],
                        callback_data=f"select_account_{account['id']}"
                    )
                ] for account in active_accounts
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                        callback_data="confirm_accounts"
                    )
                ]
            ]
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        await state.update_data(selected_groups=selected_groups, selected_accounts=[])
        await state.set_state(PostStates.waiting_for_accounts)
        
        await callback.message.edit_text(
            "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞\n"
            "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {str(e)}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞")
        await state.clear()

@dp.callback_query(PostStates.waiting_for_accounts, lambda c: c.data.startswith('select_account_'))
async def select_account(callback: types.CallbackQuery, state: FSMContext):
    try:
        account_id = int(callback.data.split('_')[2])
        data = await state.get_data()
        selected_accounts = data.get('selected_accounts', [])
        selected_groups = data.get('selected_groups', [])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        
        if account_id in selected_accounts:
            selected_accounts.remove(account_id)
        else:
            selected_accounts.append(account_id)
            
        await state.update_data(selected_accounts=selected_accounts, selected_groups=selected_groups)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        accounts = await Database.get_accounts()
        active_accounts = [acc for acc in accounts if acc['status'] == 'active']
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ ' if acc['id'] in selected_accounts else ''}{acc['phone']}",
                        callback_data=f"select_account_{acc['id']}"
                    )
                ] for acc in active_accounts
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                        callback_data="confirm_accounts"
                    )
                ]
            ]
        )
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
        await state.clear()

@dp.callback_query(PostStates.waiting_for_accounts, lambda c: c.data == "confirm_accounts")
async def confirm_accounts(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_groups = data.get('selected_groups', [])
        selected_accounts = data.get('selected_accounts', [])
        message_data = data.get('message_data', {})
        is_scheduled = data.get('is_scheduled', False)

        if not selected_groups or not selected_accounts:
            await callback.message.edit_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã")
            await state.clear()
            return

        if is_scheduled:
            # –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
            await state.set_state(PostStates.waiting_for_schedule)
            await callback.message.edit_text(
                "üïí –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–î–î.–ú–ú –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.03 15:30\n\n"
                "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
                "+30 (—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç)\n"
                "+60 (—á–µ—Ä–µ–∑ —á–∞—Å)\n"
                "+120 (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)"
            )
            return

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        await callback.message.edit_text(
            "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

        success_count = 0
        error_count = 0
        account_index = 0
        total_accounts = len(selected_accounts)
        total_groups = len(selected_groups)
        processed = 0
        start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
        groups_info = []
        for group_id in selected_groups:
            group = await Database.get_group_by_id(group_id)
            if group:
                groups_info.append({
                    'id': group['group_id'],
                    'title': group['title']
                })

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        for group_info in groups_info:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
            account = await Database.get_account_by_id(selected_accounts[account_index])
            if not account:
                continue

            account_phone = account['phone']
            group_id = group_info['id']
            group_title = group_info['title']

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                processed += 1
                progress = int((processed / total_groups) * 100)
                current_time = time.time() - start_time
                await callback.message.edit_text(
                    f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞... {progress}%\n"
                    f"üì± –ê–∫–∫–∞—É–Ω—Ç: {account_phone}\n"
                    f"üì¢ –ì—Ä—É–ø–ø–∞: {group_title}\n\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                    f"‚è± –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {current_time:.1f} —Å–µ–∫"
                )

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                client = await session_manager.get_client(account['session_file'])
                posting_manager = PostingManager(client, Database, bot)
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group_title} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_phone}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success, message = await posting_manager.send_post(group_id, message_data)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                await client.disconnect()

                if success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_title} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_phone}")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_title} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_phone}: {message}")
                    error_count += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_title} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_phone}: {str(e)}")
                error_count += 1
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
            account_index = (account_index + 1) % total_accounts

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_time = time.time() - start_time
        await callback.message.edit_text(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f} —Å–µ–∫\n\n"
            f"üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
            f"üì¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(selected_groups)}"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:\n"
            f"{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        await state.clear()

@dp.message(PostStates.waiting_for_schedule)
async def process_schedule(message: types.Message, state: FSMContext):
    try:
        schedule_time = None
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "+–º–∏–Ω—É—Ç—ã"
        if message.text.startswith('+'):
            try:
                minutes = int(message.text[1:])
                schedule_time = now + timedelta(minutes=minutes)
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n"
                    "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "–î–î.–ú–ú –ß–ß:–ú–ú\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.03 15:30\n\n"
                    "–ò–ª–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
                    "+30 (—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç)\n"
                    "+60 (—á–µ—Ä–µ–∑ —á–∞—Å)\n"
                    "+120 (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)"
                )
                return
        else:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            try:
                date_str = message.text.strip()
                if len(date_str.split()) == 2:
                    date_str = f"{now.year} {date_str}"
                schedule_time = datetime.strptime(date_str, "%Y %d.%m %H:%M")
                
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
                if schedule_time < now:
                    schedule_time = schedule_time.replace(year=now.year + 1)
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
                    "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "–î–î.–ú–ú –ß–ß:–ú–ú\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.03 15:30"
                )
                return
        
        if schedule_time <= now:
            await message.answer("‚ùå –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        message_data = data.get('message_data')
        selected_groups = data.get('selected_groups', [])
        selected_accounts = data.get('selected_accounts', [])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
        post_id = await Database.add_scheduled_post(
            message_data=message_data,
            groups=selected_groups,
            accounts=selected_accounts,
            schedule_time=int(schedule_time.timestamp())
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            f"‚úÖ –ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")
        await state.clear()

@dp.message(PostStates.waiting_for_delay)
async def process_delay(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        if not message.text.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç)")
            return
            
        delay_minutes = int(message.text)
        if delay_minutes < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - 1 –º–∏–Ω—É—Ç–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        schedule_time = int(time.time()) + (delay_minutes * 60)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
        post_id = await Database.add_scheduled_post(
            message_data=data['message'],
            groups=data['selected_groups'],
            accounts=data['selected_accounts'],
            schedule_time=schedule_time
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            f"‚úÖ –ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {datetime.fromtimestamp(schedule_time).strftime('%d.%m.%Y %H:%M')}\n"
            f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç"
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–µ—Ä–∂–∫–∏: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message):
    logger.info("–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    try:
        settings = await Database.get_all_settings()
        delay = int(settings.get('default_delay', DEFAULT_DELAY))
        threads = int(settings.get('max_threads', MAX_THREADS))
        retries = int(settings.get('max_retries', MAX_RETRIES))
        
        logger.debug(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: delay={delay}, threads={threads}, retries={retries}")
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏"),
                    types.KeyboardButton(text="üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤")
                ],
                [
                    types.KeyboardButton(text="üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"),
                    types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
                ]
            ],
            resize_keyboard=True
        )
        
        current_settings = (
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {format_time(delay)}\n"
            f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {threads}\n"
            f"üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {retries}"
        )
        
        await message.answer(current_settings, reply_markup=keyboard)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(lambda m: m.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state in [SettingsStates.waiting_for_delay, 
                        SettingsStates.waiting_for_threads,
                        SettingsStates.waiting_for_retries]:
        await state.clear()
        await settings_menu(message)
    elif current_state and current_state.startswith('GroupStates:'):
        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
        await state.clear()
        await manage_groups_menu(message)
    else:
        await state.clear()
        await start_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
@dp.message(lambda m: m.text == "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏")
async def set_delay(message: types.Message, state: FSMContext):
    settings = await Database.get_all_settings()
    current_delay = int(settings.get('default_delay', DEFAULT_DELAY))
    
    await state.set_state(SettingsStates.waiting_for_delay)
    await message.answer(
        "‚è± –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "1 = 1 –º–∏–Ω—É—Ç–∞\n"
        "60 = 1 —á–∞—Å (60 –º–∏–Ω—É—Ç)\n"
        "1440 = 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç)\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {format_time(current_delay)}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–æ–≤
@dp.message(lambda m: m.text == "üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤")
async def set_threads(message: types.Message, state: FSMContext):
    settings = await Database.get_all_settings()
    current_threads = int(settings.get('max_threads', MAX_THREADS))
    
    await state.set_state(SettingsStates.waiting_for_threads)
    await message.answer(
        "üîÑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 5 –ø–æ—Ç–æ–∫–æ–≤\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_threads}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø—ã—Ç–æ–∫
@dp.message(lambda m: m.text == "üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
async def set_retries(message: types.Message, state: FSMContext):
    settings = await Database.get_all_settings()
    current_retries = int(settings.get('max_retries', MAX_RETRIES))
    
    await state.set_state(SettingsStates.waiting_for_retries)
    await message.answer(
        "üîÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-5 –ø–æ–ø—ã—Ç–æ–∫\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_retries}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
@dp.message(SettingsStates.waiting_for_delay)
async def process_delay(message: types.Message, state: FSMContext):
    delay_seconds = parse_time(message.text)
    
    if delay_seconds is None:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 30"
        )
        return
    
    if delay_seconds < 60:  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
        await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã!")
        return
    
    await Database.update_setting('default_delay', delay_seconds)
    await state.clear()
    await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {format_time(delay_seconds)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ—Ç–æ–∫–æ–≤
@dp.message(SettingsStates.waiting_for_threads)
async def process_threads(message: types.Message, state: FSMContext):
    try:
        threads = int(message.text.strip())
        if threads < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1!")
            return
        if threads > 10:
            await message.answer("‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ!")
        
        await Database.update_setting('max_threads', threads)
        posting_pool.max_threads = threads  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–ª
        await state.clear()
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {threads}")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ø—ã—Ç–æ–∫
@dp.message(SettingsStates.waiting_for_retries)
async def process_retries(message: types.Message, state: FSMContext):
    try:
        retries = int(message.text.strip())
        if retries < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1!")
            return
        if retries > 10:
            await message.answer("‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
        
        await Database.update_setting('max_retries', retries)
        await state.clear()
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {retries}")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
@dp.message(lambda m: m.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
async def accounts_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
                types.KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            ],
            [
                types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
@dp.message(lambda m: m.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
async def manage_groups_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"),
                types.KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
            ],
            [
                types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"),
                types.KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø")
            ],
            [
                types.KeyboardButton(text="üì¶ –û–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã"),
                types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message(lambda m: m.text == "üì¶ –û–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã")
async def bulk_groups_menu(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    await state.clear()
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É"),
                types.KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø")
            ],
            [
                types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É"),
                types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É")
            ],
            [
                types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É")
async def add_bulk_group_start(message: types.Message, state: FSMContext):
    await state.set_state(GroupStates.waiting_for_bulk_group_name)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ–∫–ª–∞–º–∞ –ú–æ—Å–∫–≤–∞\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥"
    )

@dp.message(GroupStates.waiting_for_bulk_group_name)
async def process_bulk_group_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    
    if len(name) < 3 or len(name) > 50:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(bulk_group_name=name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    groups = await Database.get_active_groups()
    if not groups:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        await state.clear()
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"‚≠ïÔ∏è {group['title']}",
                    callback_data=f"select_bulk_group_{group['id']}"
                )
            ] for group in groups
        ] + [
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                    callback_data="confirm_bulk_group_selection"
                )
            ]
        ]
    )
    
    await state.update_data(selected_groups=[])
    await state.set_state(GroupStates.waiting_for_bulk_group_selection)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã '{name}'\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ—ë",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('select_bulk_group_'))
async def select_bulk_group(callback: types.CallbackQuery, state: FSMContext):
    try:
        group_id = int(callback.data.split('_')[3])
        logger.info(f"–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã {group_id} –¥–ª—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã")
        
        data = await state.get_data()
        selected_groups = data.get('selected_groups', [])
        bulk_group_name = data.get('bulk_group_name', '')
        edit_bulk_group_id = data.get('edit_bulk_group_id')  # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –≥—Ä—É–ø–ø—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞
        if group_id in selected_groups:
            selected_groups.remove(group_id)
            logger.info(f"–ì—Ä—É–ø–ø–∞ {group_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        else:
            selected_groups.append(group_id)
            logger.info(f"–ì—Ä—É–ø–ø–∞ {group_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await state.update_data(selected_groups=selected_groups)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        groups = await Database.get_active_groups()
        if not groups:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±–æ—Ä–∞")
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", show_alert=True)
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_callback = "confirm_bulk_group_edit" if edit_bulk_group_id else "confirm_bulk_group_selection"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if group['id'] in selected_groups else '‚≠ïÔ∏è'} {group['title']}",
                        callback_data=f"select_bulk_group_{group['id']}"
                    )
                ] for group in groups
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" if edit_bulk_group_id else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                        callback_data=confirm_callback
                    )
                ]
            ]
        )
        
        message_text = (
            f"{'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' if edit_bulk_group_id else '–°–æ–∑–¥–∞–Ω–∏–µ'} –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã "
            f"'{bulk_group_name}'\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_groups)} –≥—Ä—É–ø–ø"
        )
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø: {selected_groups}")
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID –≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã", show_alert=True)

@dp.callback_query(lambda c: c.data == "confirm_bulk_group_selection")
async def confirm_bulk_group_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_groups = data.get('selected_groups', [])
        name = data.get('bulk_group_name')
        
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã '{name}' —Å –≥—Ä—É–ø–ø–∞–º–∏: {selected_groups}")
        
        if not selected_groups:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É
        bulk_group_id = await Database.add_bulk_group(name, selected_groups)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ —Å ID {bulk_group_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        groups = await Database.get_active_groups()
        selected_titles = [
            group['title'] for group in groups 
            if group['id'] in selected_groups
        ]
        
        success_message = (
            f"‚úÖ –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìã –ì—Ä—É–ø–ø—ã ({len(selected_groups)}):\n"
            f"{chr(10).join('‚Ä¢ ' + title for title in selected_titles)}"
        )
        
        await callback.message.edit_text(success_message)
        logger.info(f"–û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å {len(selected_groups)} –≥—Ä—É–ø–ø–∞–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø
        await list_bulk_groups(callback.message)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã", show_alert=True)
        await state.clear()

@dp.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø")
async def list_bulk_groups(message: types.Message):
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø")
        bulk_groups = await Database.get_bulk_groups()
        
        if not bulk_groups:
            logger.info("–°–ø–∏—Å–æ–∫ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø –ø—É—Å—Ç")
            await message.answer(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø\n"
                "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "üìã –°–ø–∏—Å–æ–∫ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø:\n\n"
        for bg in bulk_groups:
            text += f"üì¶ {bg['name']} (ID: {bg['id']})\n"
            text += f"–ì—Ä—É–ø–ø: {len(bg['groups'])}\n"
            text += f"–°–æ–∑–¥–∞–Ω–∞: {datetime.fromtimestamp(bg['created_at']).strftime('%d.%m.%Y %H:%M')}\n"
            text += f"–ì—Ä—É–ø–ø—ã –≤ —Å–æ—Å—Ç–∞–≤–µ:\n"
            for group in bg['groups']:
                text += f"‚Ä¢ {group['title']}"
                if group['username']:
                    text += f" (@{group['username']})"
                text += "\n"
            text += "\n"
        
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ {len(bulk_groups)} –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø")

@dp.message(lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É")
async def edit_bulk_group_start(message: types.Message):
    bulk_groups = await Database.get_bulk_groups()
    
    if not bulk_groups:
        await message.answer("‚ùå –ù–µ—Ç –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
        
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=bg['name'],
                    callback_data=f"edit_bulk_group_{bg['id']}"
                )
            ] for bg in bulk_groups
        ]
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('edit_bulk_group_'))
async def edit_bulk_group(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        bulk_group_id = int(callback.data.split('_')[3])
        logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã {bulk_group_id}")
        
        bulk_group = await Database.get_bulk_group_by_id(bulk_group_id)
        
        if not bulk_group:
            error_msg = f"–û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ {bulk_group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            logger.error(error_msg)
            await callback.answer("‚ùå –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
        await state.set_state(GroupStates.waiting_for_bulk_group_selection)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø –∏–∑ –º–∞—Å—Å–∏–≤–∞ groups
        selected_groups = [group['id'] for group in bulk_group['groups']]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            edit_bulk_group_id=bulk_group_id,
            bulk_group_name=bulk_group['name'],
            selected_groups=selected_groups
        )
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã: {bulk_group}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        groups = await Database.get_active_groups()
        if not groups:
            error_msg = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            logger.error(error_msg)
            await callback.answer(f"‚ùå {error_msg}", show_alert=True)
            await state.clear()
            return
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if group['id'] in selected_groups else '‚≠ïÔ∏è'} {group['title']}",
                        callback_data=f"select_bulk_group_{group['id']}"
                    )
                ] for group in groups
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                        callback_data="confirm_bulk_group_edit"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã '{bulk_group['name']}'\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_groups)} –≥—Ä—É–ø–ø",
            reply_markup=keyboard
        )
        
        logger.info(f"–û—Ç–∫—Ä—ã—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã {bulk_group_id}")
        
    except ValueError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã: {str(e)}"
        logger.error(error_msg)
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", show_alert=True)
        await state.clear()
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã: {str(e)}"
        logger.error(error_msg)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

async def update_bulk_group_with_groups(bulk_group_id: int, selected_groups: list) -> tuple[bool, str]:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏"""
    try:
        if not bulk_group_id:
            return False, "ID –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        if not selected_groups:
            return False, "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –≥—Ä—É–ø–ø—ã"
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É
        success = await Database.update_bulk_group(bulk_group_id, group_ids=selected_groups)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
            groups = await Database.get_active_groups()
            selected_titles = [
                group['title'] for group in groups 
                if group['id'] in selected_groups
            ]
            
            success_message = (
                f"‚úÖ –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üìã –ì—Ä—É–ø–ø—ã ({len(selected_groups)}):\n"
                f"{chr(10).join('‚Ä¢ ' + title for title in selected_titles)}"
            )
            
            return True, success_message
        else:
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã"
            
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

@dp.callback_query(lambda c: c.data == "confirm_bulk_group_edit")
async def confirm_bulk_group_edit(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        bulk_group_id = data.get('edit_bulk_group_id')
        selected_groups = data.get('selected_groups', [])
        bulk_group_name = data.get('bulk_group_name', '')
        
        if not bulk_group_id:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await state.clear()
            return
            
        if not selected_groups:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
            return
            
        success = await Database.update_bulk_group(bulk_group_id, group_ids=selected_groups)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É
            bulk_group = await Database.get_bulk_group_by_id(bulk_group_id)
            
            success_message = (
                f"‚úÖ –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ '{bulk_group_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üìã –ì—Ä—É–ø–ø—ã ({len(bulk_group['groups'])}):\n"
                f"{chr(10).join('‚Ä¢ ' + group['title'] for group in bulk_group['groups'])}"
            )
            
            await callback.message.edit_text(success_message)
            await list_bulk_groups(callback.message)
            await state.clear()
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@dp.message(lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É")
async def delete_bulk_group_start(message: types.Message):
    bulk_groups = await Database.get_bulk_groups()
    
    if not bulk_groups:
        await message.answer("‚ùå –ù–µ—Ç –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
        
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"‚ùå {bg['name']}",
                    callback_data=f"delete_bulk_group_{bg['id']}"
                )
            ] for bg in bulk_groups
        ]
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('delete_bulk_group_'))
async def delete_bulk_group(callback: types.CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        if 'confirm' in callback.data:
            bulk_group_id = int(callback.data.split('_')[4])
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã {bulk_group_id}")
            
            success = await Database.delete_bulk_group(bulk_group_id)
            
            if success:
                logger.info(f"–û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ {bulk_group_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                await callback.message.edit_text("‚úÖ –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã {bulk_group_id}")
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã")
            return
            
        bulk_group_id = int(callback.data.split('_')[3])
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã {bulk_group_id}")
        
        bulk_group = await Database.get_bulk_group_by_id(bulk_group_id)
        
        if not bulk_group:
            logger.error(f"–û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ {bulk_group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.answer("‚ùå –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=f"delete_bulk_group_confirm_{bulk_group_id}"
                    ),
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="cancel_bulk_group_delete"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É '{bulk_group['name']}'?",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "cancel_bulk_group_delete")
async def cancel_bulk_group_delete(callback: types.CallbackQuery):
    try:
        groups = await Database.get_active_groups()
        
        if not groups:
            await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç")
            return
            
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=f"‚ùå {group['title']}", 
                    callback_data=f"delete_group_{group['id']}"
                )] for group in groups
            ]
        )
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message(lambda m: m.text == "‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç")
async def scheduled_post_start(message: types.Message, state: FSMContext):
    await state.set_state(PostStates.waiting_for_content)
    await state.update_data(is_scheduled=True)
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.\n"
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel"
    )

@dp.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤")
async def list_scheduled_posts(message: types.Message):
    try:
        posts = await Database.get_pending_posts()
        
        if not posts:
            await message.answer(
                "üì≠ –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ '‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π."
            )
            return
            
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"üïí –ü–æ—Å—Ç #{post['id']} ({datetime.fromtimestamp(post['schedule_time']).strftime('%d.%m %H:%M')})",
                        callback_data=f"post_menu_{post['id']}"
                    )
                ] for post in posts
            ]
        )
        
        await message.answer(
            "üìã –°–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤")

@dp.callback_query(lambda c: c.data.startswith('post_menu_'))
async def post_menu(callback: types.CallbackQuery):
    try:
        post_id = int(callback.data.split('_')[2])
        post = await Database.get_post_by_id(post_id)
        
        if not post:
            await callback.message.edit_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        schedule_time = datetime.fromtimestamp(post['schedule_time'])
        groups = [await Database.get_group_by_id(str(g)) for g in post['groups']]
        accounts = [await Database.get_account_by_id(a) for a in post['accounts']]
        
        status_text = (
            f"üìù –ü–æ—Å—Ç #{post['id']}\n"
            f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {schedule_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üì¢ –ì—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
            + "\n".join([f"‚Ä¢ {g['title']}" for g in groups if g]) + "\n\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
            + "\n".join([f"‚Ä¢ {a['phone']}" for a in accounts if a])
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å",
                    callback_data=f"send_now_{post_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç",
                    callback_data=f"cancel_post_{post_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="scheduled_posts_list"
                )
            ]
        ])
        
        await callback.message.edit_text(status_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø–æ—Å—Ç–∞: {str(e)}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith('send_now_'))
async def send_post_now(callback: types.CallbackQuery):
    try:
        post_id = int(callback.data.split('_')[2])
        post = await Database.get_post_by_id(post_id)
        
        if not post:
            await callback.message.edit_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        await callback.message.edit_text(
            f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ #{post_id}...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –∏ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        groups = [await Database.get_group_by_id(str(g)) for g in post['groups']]
        accounts = [await Database.get_account_by_id(a) for a in post['accounts']]
        
        groups_text = "\n".join([f"‚Ä¢ {g['title']}" for g in groups if g])
        accounts_text = "\n".join([f"‚Ä¢ {a['phone']}" for a in accounts if a])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        await callback.message.edit_text(
            f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞ #{post_id}\n\n"
            f"üì¢ –ì—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n{groups_text}\n\n"
            f"üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n{accounts_text}\n\n"
            "‚è≥ –ò–¥—ë—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞..."
        )
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        await process_scheduled_post(post)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ
        await Database.update_post_status(post_id, "sent")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ –ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {len(groups)} –≥—Ä—É–ø–ø\n"
            f"üë§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
            "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ #{post_id}:\n"
            f"{str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø –∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
        )

@dp.callback_query(lambda c: c.data.startswith('cancel_post_'))
async def cancel_scheduled_post(callback: types.CallbackQuery):
    try:
        post_id = int(callback.data.split('_')[2])
        post = await Database.get_post_by_id(post_id)
        
        if not post:
            await callback.message.edit_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if post['status'] != 'pending':
            await callback.message.edit_text(
                f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç #{post_id}\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {post['status']}"
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"confirm_cancel_post_{post_id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç",
                    callback_data=f"post_menu_{post_id}"
                )
            ]
        ])

        schedule_time = datetime.fromtimestamp(post['schedule_time'])
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç #{post_id}?\n\n"
            f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {schedule_time.strftime('%d.%m.%Y %H:%M')}\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ—Å—Ç–∞: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ—Å—Ç–∞:\n{str(e)}"
        )

@dp.callback_query(lambda c: c.data.startswith('confirm_cancel_post_'))
async def confirm_cancel_post(callback: types.CallbackQuery):
    try:
        post_id = int(callback.data.split('_')[3])
        post = await Database.get_post_by_id(post_id)
        
        if not post:
            await callback.message.edit_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å—Ç
        await Database.update_post_status(post_id, "cancelled")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ –ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã."
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç–∞: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ—Å—Ç–∞:\n{str(e)}"
        )

@dp.callback_query(lambda c: c.data == "scheduled_posts_list")
async def back_to_posts_list(callback: types.CallbackQuery):
    await list_scheduled_posts(callback.message)

async def process_scheduled_post(post: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = []
        for account_id in post['accounts']:
            account = await Database.get_account_by_id(account_id)
            if account and account['status'] == 'active':
                accounts.append(account)
        
        if not accounts:
            logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ #{post['id']}")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
        groups = []
        for group_id in post['groups']:
            group = await Database.get_group_by_id(str(group_id))
            if group:
                groups.append(group)
        
        if not groups:
            logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ #{post['id']}")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        tasks = []
        message_data = post['message']
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
        account_index = 0
        for group in groups:
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –∫—Ä—É–≥—É
            account = accounts[account_index]
            account_index = (account_index + 1) % len(accounts)  # –°–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
            
            try:
                client = await session_manager.get_client(account['session_file'])
                posting_manager = PostingManager(client, Database, bot)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                can_send, phone = await posting_manager.check_account_status()
                if can_send:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    task = asyncio.create_task(
                        posting_manager.send_post(
                            str(group['group_id']),
                            message_data
                        )
                    )
                    tasks.append((task, group['title'], account['phone']))
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group['title']} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account['phone']}")
                else:
                    logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account['phone']} –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group['title']}: {str(e)}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if tasks:
            success_count = 0
            error_count = 0
            
            for task, group_title, account_phone in tasks:
                try:
                    success, message = await task
                    if success:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_title} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_phone}")
                        success_count += 1
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_title} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_phone}: {message}")
                        error_count += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_title} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_phone}: {str(e)}")
                    error_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            try:
                user_id = post.get('user_id')  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –ø–æ—Å—Ç
                if user_id:
                    await bot.send_message(
                        user_id,
                        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ #{post['id']}:\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
                    )
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        await Database.update_post_status(post['id'], "sent")
        logger.info(f"‚úÖ –ü–æ—Å—Ç #{post['id']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}")

async def check_scheduled_posts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    while True:
        try:
            current_time = int(time.time())
            posts = await Database.get_pending_posts()
            
            for post in posts:
                if post['schedule_time'] <= current_time:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ #{post['id']}")
                    await process_scheduled_post(post)
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}")
            await asyncio.sleep(60)

def format_time(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –∏ —á–∞—Å—ã"""
    minutes = seconds // 60
    if minutes < 60:
        return f"{minutes} –º–∏–Ω"
    hours = minutes // 60
    remaining_minutes = minutes % 60
    if remaining_minutes == 0:
        return f"{hours} —á"
    return f"{hours} —á {remaining_minutes} –º–∏–Ω"

def parse_time(time_str: str) -> Optional[int]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –º–∏–Ω—É—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥—ã"""
    try:
        minutes = int(time_str.strip())
        if minutes < 1:
            return None
        return minutes * 60
    except ValueError:
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def add_group_start(message: types.Message, state: FSMContext):
    await state.set_state(GroupStates.waiting_for_group)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –≥—Ä—É–ø–ø—ã –∏–ª–∏ –µ—ë ID.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "@group_name\n"
        "-1001234567890\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥"
    )

@dp.message(GroupStates.waiting_for_group)
async def process_group_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã"""
    try:
        input_text = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        if "t.me/" in input_text or "telegram.me/" in input_text:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã
            accounts = await Database.get_active_accounts()
            if not accounts:
                await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã!")
                return
                
            session_file = accounts[0]["session_file"]
            client = await session_manager.get_client(session_file)
            
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ
                await message.answer("üîÑ –ü—ã—Ç–∞—é—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ...")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º hash –∏–∑ —Å—Å—ã–ª–∫–∏
                invite_hash = None
                if '+' in input_text:
                    invite_hash = input_text.split('+')[-1]
                elif 'joinchat/' in input_text:
                    invite_hash = input_text.split('joinchat/')[-1]
                
                try:
                    if invite_hash:
                        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º ImportChatInviteRequest
                        try:
                            await client(ImportChatInviteRequest(invite_hash))
                            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ")
                        except UserAlreadyParticipantError:
                            # –ï—Å–ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã")
                            pass
                        except (InviteHashInvalidError, InviteHashExpiredError):
                            await message.answer("‚ùå –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞")
                            return
                        except ChannelPrivateError:
                            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                            return
                    else:
                        # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º JoinChannelRequest
                        try:
                            await client(JoinChannelRequest(input_text))
                            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ")
                        except UserAlreadyParticipantError:
                            # –ï—Å–ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã")
                            pass
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ø—É–±–ª–∏—á–Ω–æ–π –≥—Ä—É–ø–ø–µ: {str(e)}")
                            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
                            return
                except Exception as e:
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    logger.warning(f"–ù–µ–∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ: {str(e)}")
                    pass

                # –ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ
                    group_entity = await client.get_entity(input_text)
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ, –ø—Ä–æ–±—É–µ–º –ø–æ hash
                    try:
                        messages = await client.get_messages(invite_hash, limit=1)
                        if messages and messages[0].peer_id:
                            group_entity = await client.get_entity(messages[0].peer_id)
                        else:
                            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {str(e)}")
                        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.")
                        return
                
                if hasattr(group_entity, 'id'):
                    group_id = str(group_entity.id)
                    if not group_id.startswith('-100'):
                        group_id = f"-100{group_id}"
                        
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                    title = getattr(group_entity, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    username = getattr(group_entity, 'username', None)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É
                    await Database.add_group(
                        group_id=group_id.replace('-100', ''),
                        title=title,
                        username=username,
                        invite_link=input_text
                    )
                    
                    await message.answer(
                        f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                        f"üÜî ID: {group_id}\n"
                        f"üë• Username: {f'@{username}' if username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                        f"üîó –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
                    )
                    await state.clear()
                    return
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {str(e)}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –ø–æ —Å—Å—ã–ª–∫–µ.")
                return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if input_text.startswith('@'):
            username = input_text[1:]
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã
            accounts = await Database.get_active_accounts()
            if not accounts:
                await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã!")
                return
                
            session_file = accounts[0]["session_file"]
            client = await session_manager.get_client(session_file)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –ø–æ username
                group = await client.get_entity(input_text)
                group_id = str(group.id)
                if not group_id.startswith('-100'):
                    group_id = f"-100{group_id}"
                    
                await Database.add_group(
                    group_id=group_id.replace('-100', ''),
                    title=group.title,
                    username=username
                )
                
                await message.answer(
                    f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
                    f"üÜî ID: {group_id}\n"
                    f"üë• Username: @{username}"
                )
                await state.clear()
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {str(e)}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.")
                return
                
        elif input_text.startswith('-100'):
            group_id = input_text.replace('-100', '')
            if not group_id.isdigit():
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã!")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã
            accounts = await Database.get_active_accounts()
            if not accounts:
                await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã!")
                return
                
            session_file = accounts[0]["session_file"]
            client = await session_manager.get_client(session_file)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –ø–æ ID
                group = await client.get_entity(PeerChannel(int(group_id)))
                
                await Database.add_group(
                    group_id=group_id,
                    title=group.title,
                    username=group.username if hasattr(group, 'username') else None
                )
                
                await message.answer(
                    f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
                    f"üÜî ID: -100{group_id}\n"
                    f"üë• Username: {f'@{group.username}' if hasattr(group, 'username') and group.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
                )
                await state.clear()
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {str(e)}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.")
                return
        
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (https://t.me/...)\n"
            "- Username –≥—Ä—É–ø–ø—ã (@group_name)\n"
            "- ID –≥—Ä—É–ø–ø—ã (-100...)\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
@dp.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
async def list_groups(message: types.Message):
    try:
        groups = await Database.get_active_groups()
        
        if not groups:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n"
                "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é."
            )
            return
        
        groups_text = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n"
        for group in groups:
            username = f"@{group['username']}" if group['username'] else "–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
            groups_text += f"‚Ä¢ {group['title']}\n  {username}\n  ID: {group['group_id']}\n\n"
        
        await message.answer(groups_text)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
@dp.message(lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def delete_group_menu(message: types.Message):
    try:
        groups = await Database.get_active_groups()
        
        if not groups:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=f"‚ùå {group['title']}", 
                    callback_data=f"delete_group_{group['id']}"
                )] for group in groups
            ]
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@dp.callback_query(lambda c: c.data.startswith('delete_group_'))
async def delete_group(callback: types.CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        if 'confirm' in callback.data:
            group_id = int(callback.data.split('_')[3])
            group = await Database.get_group_by_id(group_id)
            
            if not group:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
                
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
            await Database.delete_group(group_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            groups = await Database.get_active_groups()
            
            if not groups:
                await callback.message.edit_text("‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞.\n\n–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.")
                return
                
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text=f"‚ùå {group['title']}", 
                        callback_data=f"delete_group_{group['id']}"
                    )] for group in groups
                ]
            )
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            await callback.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        group_id = int(callback.data.split('_')[2])
        group = await Database.get_group_by_id(group_id)
        
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=f"delete_group_confirm_{group_id}"
                    ),
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="cancel_delete_group"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É {group['title']}?",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "cancel_delete_group")
async def cancel_delete_group(callback: types.CallbackQuery):
    try:
        groups = await Database.get_active_groups()
        
        if not groups:
            await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç")
            return
            
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=f"‚ùå {group['title']}", 
                    callback_data=f"delete_group_{group['id']}"
                )] for group in groups
            ]
        )
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø
@dp.message(lambda m: m.text == "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø")
async def check_groups_access(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        groups = await Database.get_groups()
        if not groups:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = await Database.get_accounts()
        active_accounts = [acc for acc in accounts if acc['status'] == 'active']
        
        if not active_accounts:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
            
        status_message = await message.answer("‚åõ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–∞–º...")
        results = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É —Å –∫–∞–∂–¥—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
        for group in groups:
            group_results = {
                'group_id': group['id'],
                'title': group['title'],
                'accounts': []
            }
            
            for account in active_accounts:
                try:
                    client = await session_manager.get_client(account['session_file'])
                    posting_manager = PostingManager(client, Database, bot)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
                    can_post, reason = await posting_manager.check_group_access(group['group_id'])
                    
                    group_results['accounts'].append({
                        'phone': account['phone'],
                        'can_post': can_post,
                        'reason': reason
                    })
                    
                except Exception as e:
                    group_results['accounts'].append({
                        'phone': account['phone'],
                        'can_post': False,
                        'reason': str(e)
                    })
                    
            results.append(group_results)
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø:\n\n"
        
        for group in results:
            report += f"üì¢ –ì—Ä—É–ø–ø–∞: {group['title']}\n"
            for acc in group['accounts']:
                status = "‚úÖ" if acc['can_post'] else "‚ùå"
                reason = f" ({acc['reason']})" if not acc['can_post'] else ""
                report += f"{status} {acc['phone']}{reason}\n"
            report += "\n"
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        max_length = 4096
        if len(report) > max_length:
            parts = [report[i:i + max_length] for i in range(0, len(report), max_length)]
            for i, part in enumerate(parts):
                if i == 0:
                    await status_message.edit_text(part)
                else:
                    await message.answer(part)
        else:
            await status_message.edit_text(report)
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø: {str(e)}")

@dp.message(lambda m: m.text == "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤")
async def automated_post_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await state.clear()
    await state.set_state(PostStates.waiting_for_auto_groups)
    await state.update_data(selected_groups=[])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø
    groups = await Database.get_active_groups()
    bulk_groups = await Database.get_bulk_groups()
    
    if not groups:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!"
        )
        await state.clear()
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã
    if bulk_groups:
        keyboard.extend([
            [
                types.InlineKeyboardButton(
                    text=f"üì¶ {bg['name']} ({len(bg['groups'])} –≥—Ä—É–ø–ø)",
                    callback_data=f"select_bulk_group_post_{bg['id']}"
                )
            ] for bg in bulk_groups
        ])
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        keyboard.append([
            types.InlineKeyboardButton(
                text="‚ûñ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã ‚ûñ",
                callback_data="separator"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    keyboard.extend([
        [
            types.InlineKeyboardButton(
                text=f"‚≠ïÔ∏è {group['title']}",
                callback_data=f"select_group_{group['id']}"
            )
        ] for group in groups
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard.append([
        types.InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data="confirm_auto_groups"
        )
    ])
    
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ—ë.\n"
        "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –∏–ª–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É.",
        reply_markup=markup
    )

@dp.callback_query(lambda c: c.data == "confirm_auto_groups")
async def confirm_auto_groups(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    
    if not selected_groups:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    await state.set_state(PostStates.waiting_for_auto_accounts)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts = await Database.get_active_accounts()
    if not accounts:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!"
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"‚≠ïÔ∏è {account['phone']}",
                    callback_data=f"select_account_{account['id']}"
                )
            ] for account in accounts
        ] + [
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                    callback_data="confirm_auto_accounts"
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ.",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "confirm_auto_accounts")
async def confirm_auto_accounts(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    selected_accounts = data.get('selected_accounts', [])
    
    if not selected_accounts:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!", show_alert=True)
        return
        
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await state.set_state(PostStates.waiting_for_auto_content)
    await callback.message.edit_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª"
    )

@dp.callback_query(lambda c: c.data.startswith('edit_auto_content_'))
async def edit_auto_content(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞
        post_id = int(callback.data.split('_')[3])
        post = await Database.get_automated_post_by_id(post_id)
        
        if not post:
            logger.error(f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(edit_post_id=post_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
        current_content = post['message'].get('text', '') or post['message'].get('caption', '')
        await state.set_state(PostStates.waiting_for_auto_content)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"auto_post_menu_{post_id}"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            f"üìù –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞:\n\n"
            f"{current_content}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@dp.message(PostStates.waiting_for_auto_content)
async def process_auto_content(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        if not data:
            logger.error("–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
            
        edit_post_id = data.get('edit_post_id')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            "text": message.text,
            "caption": message.caption,
            "message_id": message.message_id,
            "user_id": message.from_user.id
        }
        
        if message.photo:
            message_data["photo"] = message.photo[-1].file_id
        elif message.video:
            message_data["video"] = message.video.file_id
        elif message.document:
            message_data["document"] = {
                "file_id": message.document.file_id,
                "file_name": message.document.file_name
            }
        
        if edit_post_id:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
            try:
                success = await Database.update_automated_post(edit_post_id, message_data=message_data)
                if success:
                    logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ {edit_post_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    await message.answer("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–æ—Å—Ç–∞
                    await message.answer(
                        "üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ—Å—Ç–∞...",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(
                                text="üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ—Å—Ç–∞",
                                callback_data=f"auto_post_menu_{edit_post_id}"
                            )]
                        ])
                    )
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞ {edit_post_id}")
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            await state.update_data(message_data=message_data)
            await state.set_state(PostStates.waiting_for_auto_times_count)
            await message.answer(
                "üîÑ –£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24"
            )
            return
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        await state.clear()

@dp.message(PostStates.waiting_for_auto_times_count)
async def process_auto_times_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        times_count = int(message.text)
        if not 1 <= times_count <= 24:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24"
            )
            return
            
        data = await state.get_data()
        message_data = data.get('message_data')
        
        if not message_data:
            logger.error("–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
            
        await state.update_data(times_count=times_count, times=[], current_time_index=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(PostStates.waiting_for_auto_time)
        await message.answer(
            "üïí –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24"
        )

@dp.message(PostStates.waiting_for_auto_time)
async def process_auto_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    time_str = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    if not re.match(r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$', time_str):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30"
        )
        return
        
    data = await state.get_data()
    times = data.get('times', [])
    times_count = data.get('times_count', 1)
    current_time_index = data.get('current_time_index', 0)
    edit_post_id = data.get('edit_post_id')
    
    if time_str in times:
        await message.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        return
        
    times.append(time_str)
    current_time_index += 1
    await state.update_data(times=times, current_time_index=current_time_index)
    
    if current_time_index < times_count:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è
        await message.answer(
            f"üïí –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {current_time_index + 1}-–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30\n\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ {current_time_index} –∏–∑ {times_count}"
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    times.sort()
    
    if edit_post_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
        await Database.update_automated_post(edit_post_id, times=times)
        await message.answer(
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–í—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {', '.join(times)}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–æ—Å—Ç–∞
        await message.answer(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ—Å—Ç–∞...",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ—Å—Ç–∞",
                    callback_data=f"auto_post_menu_{edit_post_id}"
                )]
            ])
        )
        await state.clear()
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        message_data = data.get('message_data')
        groups = data.get('selected_groups', [])
        accounts = data.get('selected_accounts', [])
        
        post_id = await Database.add_automated_post(
            message_data=message_data,
            groups=groups,
            accounts=accounts,
            times=times
        )
        
        await message.answer(
            "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"ID –ø–æ—Å—Ç–∞: {post_id}\n\n"
            f"–í—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {', '.join(times)}"
        )
        await state.clear()

async def check_automated_posts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            posts = await Database.get_automated_posts()
            active_posts = [p for p in posts if p['status'] == 'active']
            
            if not active_posts:
                await asyncio.sleep(60)  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                continue
                
            current_time = datetime.now().strftime("%H:%M")
            
            for post in active_posts:
                if current_time in post['times']:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ #{post['id']}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—É–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    posting_pool = PostingPool(MAX_THREADS)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
                    accounts = []
                    for account_id in post['accounts']:
                        account = await Database.get_account_by_id(account_id)
                        if account and account['status'] == 'active':
                            accounts.append(account)
                    
                    if not accounts:
                        logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ #{post['id']}")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
                    groups = []
                    for group_id in post['groups']:
                        group = await Database.get_group_by_id(str(group_id))
                        if group:
                            groups.append(group)
                    
                    if not groups:
                        logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ—Å—Ç–∞ #{post['id']}")
                        continue
                    
                    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                    groups_per_account = len(groups) // len(accounts)
                    if groups_per_account == 0:
                        groups_per_account = 1
                    
                    current_account_index = 0
                    current_group_index = 0
                    success_count = 0
                    error_count = 0
                    
                    while current_group_index < len(groups):
                        account = accounts[current_account_index]
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                        client = await session_manager.get_client(account['session_file'])
                        posting_manager = PostingManager(client, Database, bot)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
                        for _ in range(groups_per_account):
                            if current_group_index >= len(groups):
                                break
                                
                            group = groups[current_group_index]
                            task = await posting_pool.add_posting_task(
                                posting_manager=posting_manager,
                                group_id=group['group_id'],
                                message_data=post['message']
                            )
                            
                            if task:
                                try:
                                    success, message = await task
                                    if success:
                                        success_count += 1
                                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group['title']} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account['phone']}")
                                    else:
                                        error_count += 1
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group['title']}: {message}")
                                except Exception as e:
                                    error_count += 1
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group['title']}: {str(e)}")
                            
                            current_group_index += 1
                        
                        current_account_index = (current_account_index + 1) % len(accounts)
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
                    await posting_pool.wait_all()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if success_count > 0:
                        try:
                            user_id = post['message'].get('user_id')
                            if user_id:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç
                                groups_text = "\n".join([f"‚Ä¢ {g['title']}" for g in groups])
                                
                                await bot.send_message(
                                    user_id,
                                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç #{post['id']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                                    f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n\n"
                                    f"üì¢ –ì—Ä—É–ø–ø—ã:\n{groups_text}\n\n"
                                    f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {current_time}"
                                )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
                    
                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç #{post['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            await asyncio.sleep(60)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}")
            await asyncio.sleep(60)

@dp.message(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤")
async def automated_posts_settings(message: types.Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    posts = await Database.get_automated_posts()
    
    if not posts:
        await message.answer(
            "üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤'"
        )
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å—Ç–æ–≤
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"–ü–æ—Å—Ç #{post['id']} ({len(post['times'])} —Ä–∞–∑ –≤ –¥–µ–Ω—å)",
                    callback_data=f"auto_post_menu_{post['id']}"
                )
            ] for post in posts
        ]
    )
    
    await message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('auto_post_menu_'))
async def auto_post_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º"""
    post_id = int(callback.data.split('_')[3])
    post = await Database.get_automated_post_by_id(post_id)
    
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –∏ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    groups = await Database.get_active_groups()
    accounts = await Database.get_active_accounts()
    
    group_names = [
        group['title'] for group in groups 
        if group['id'] in post['groups']
    ]
    account_phones = [
        f"+{account['phone']}" for account in accounts 
        if account['id'] in post['accounts']
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç",
                    callback_data=f"edit_auto_content_{post_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—ã",
                    callback_data=f"edit_auto_groups_{post_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã",
                    callback_data=f"edit_auto_accounts_{post_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                    callback_data=f"edit_auto_schedule_{post_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if post['status'] == 'active' else "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å",
                    callback_data=f"toggle_auto_post_{post_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç",
                    callback_data=f"delete_auto_post_{post_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="auto_posts_list"
                )
            ]
        ]
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üìù –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç #{post_id}\n\n"
        f"üì¢ –ì—Ä—É–ø–ø—ã ({len(group_names)}):\n"
        f"{chr(10).join('- ' + name for name in group_names)}\n\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã ({len(account_phones)}):\n"
        f"{chr(10).join('- ' + phone for phone in account_phones)}\n\n"
        f"üïí –í—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ({len(post['times'])}):\n"
        f"{chr(10).join('- ' + time for time in sorted(post['times']))}\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if post['status'] == 'active' else '‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('toggle_auto_post_'))
async def toggle_auto_post(callback: types.CallbackQuery):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    post_id = int(callback.data.split('_')[3])
    post = await Database.get_automated_post_by_id(post_id)
    
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    new_status = 'paused' if post['status'] == 'active' else 'active'
    await Database.update_automated_post(post_id, status=new_status)
    
    action = "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if new_status == 'paused' else "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω"
    await callback.answer(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ {action}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å—Ç–∞
    await auto_post_menu(callback)

@dp.callback_query(lambda c: c.data.startswith('delete_auto_post_'))
async def delete_auto_post(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    post_id = int(callback.data.split('_')[3])
    post = await Database.get_automated_post_by_id(post_id)
    
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"confirm_delete_auto_{post_id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"auto_post_menu_{post_id}"
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç #{post_id}?",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('confirm_delete_auto_'))
async def confirm_delete_auto_post(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    post_id = int(callback.data.split('_')[3])
    
    await Database.delete_automated_post(post_id)
    await callback.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
    await automated_posts_settings(callback.message)

@dp.callback_query(lambda c: c.data == "auto_posts_list")
async def back_to_auto_posts_list(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    await automated_posts_settings(callback.message)

@dp.callback_query(PostStates.waiting_for_auto_groups, lambda c: c.data.startswith('select_group_'))
async def select_auto_group(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    group_id = int(callback.data.split('_')[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞
    if group_id in selected_groups:
        selected_groups.remove(group_id)
    else:
        selected_groups.append(group_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_groups=selected_groups)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    groups = await Database.get_active_groups()
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"{'‚úÖ' if group['id'] in selected_groups else '‚≠ïÔ∏è'} {group['title']}",
                    callback_data=f"select_group_{group['id']}"
                )
            ] for group in groups
        ] + [
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                    callback_data="confirm_auto_groups"
                )
            ]
        ]
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_groups)}",
        reply_markup=keyboard
    )

@dp.callback_query(PostStates.waiting_for_auto_groups, lambda c: c.data == "confirm_auto_groups")
async def confirm_auto_groups(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    
    if not selected_groups:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    await state.set_state(PostStates.waiting_for_auto_accounts)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts = await Database.get_active_accounts()
    if not accounts:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!"
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"‚≠ïÔ∏è {account['phone']}",
                    callback_data=f"select_account_{account['id']}"
                )
            ] for account in accounts
        ] + [
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                    callback_data="confirm_auto_accounts"
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ.",
        reply_markup=keyboard
    )

@dp.callback_query(PostStates.waiting_for_auto_accounts, lambda c: c.data.startswith('select_account_'))
async def select_auto_account(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    account_id = int(callback.data.split('_')[2])
    data = await state.get_data()
    selected_accounts = data.get('selected_accounts', [])
    
    if account_id in selected_accounts:
        selected_accounts.remove(account_id)
    else:
        selected_accounts.append(account_id)
        
    await state.update_data(selected_accounts=selected_accounts)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    accounts = await Database.get_active_accounts()
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"{'‚úÖ' if account['id'] in selected_accounts else '‚≠ïÔ∏è'} {account['phone']}",
                    callback_data=f"select_account_{account['id']}"
                )
            ] for account in accounts
        ] + [
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                    callback_data="confirm_auto_accounts"
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_accounts)}",
        reply_markup=keyboard
    )

@dp.callback_query(PostStates.waiting_for_auto_accounts, lambda c: c.data == "confirm_auto_accounts")
async def confirm_auto_accounts(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    selected_accounts = data.get('selected_accounts', [])
    
    if not selected_accounts:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!", show_alert=True)
        return
        
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await state.set_state(PostStates.waiting_for_auto_content)
    await callback.message.edit_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª"
    )

@dp.callback_query(lambda c: c.data.startswith('edit_auto_groups_'))
async def edit_auto_groups(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞
        post_id = int(callback.data.split('_')[3])
        post = await Database.get_automated_post_by_id(post_id)
        
        if not post:
            logger.error(f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –∏ —Ç–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã
        await state.update_data(
            edit_post_id=post_id,
            selected_groups=post.get('groups', []).copy()
        )
        
        logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        groups = await Database.get_active_groups()
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if group['id'] in post.get('groups', []) else '‚≠ïÔ∏è'} {group['title']}",
                        callback_data=f"select_edit_group_{group['id']}"
                    )
                ] for group in groups
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                        callback_data="confirm_edit_groups"
                    ),
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"auto_post_menu_{post_id}"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ—Å—Ç–∞\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(post.get('groups', []))}",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith('edit_auto_accounts_'))
async def edit_auto_accounts(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞
        post_id = int(callback.data.split('_')[3])
        post = await Database.get_automated_post_by_id(post_id)
        
        if not post:
            logger.error(f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –∏ —Ç–µ–∫—É—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        await state.update_data(
            edit_post_id=post_id,
            selected_accounts=post.get('accounts', []).copy()
        )
        
        logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        accounts = await Database.get_active_accounts()
        if not accounts:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
            return
            
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if account['id'] in post.get('accounts', []) else '‚≠ïÔ∏è'} {account['phone']}",
                        callback_data=f"select_edit_account_{account['id']}"
                    )
                ] for account in accounts
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                        callback_data="confirm_edit_accounts"
                    ),
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"auto_post_menu_{post_id}"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(post.get('accounts', []))}",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith('edit_auto_schedule_'))
async def edit_auto_schedule(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    post_id = int(callback.data.split('_')[3])
    post = await Database.get_automated_post_by_id(post_id)
    
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        edit_post_id=post_id,
        message_data=post['message'],
        selected_groups=post['groups'],
        selected_accounts=post['accounts']
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫
    await state.set_state(PostStates.waiting_for_auto_times_count)
    await callback.message.edit_text(
        "üîÑ –£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24"
    )

@dp.callback_query(lambda c: c.data == "confirm_edit_groups")
async def confirm_edit_groups(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        if not data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await state.clear()
            return

        post_id = data.get('edit_post_id')
        bulk_group_id = data.get('edit_bulk_group_id')
        selected_groups = data.get('selected_groups', [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏–±–æ –ø–æ—Å—Ç, –ª–∏–±–æ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É
        if post_id:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ—Å—Ç–∞
            if not selected_groups:
                await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
                return

            success = await Database.update_automated_post(post_id, groups=selected_groups)
            if success:
                await callback.answer("‚úÖ –ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", show_alert=True)
                await state.clear()
                await auto_post_menu(callback)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø", show_alert=True)
                await state.clear()

        elif bulk_group_id:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã
            if not selected_groups:
                await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
                return

            success = await Database.update_bulk_group(bulk_group_id, group_ids=selected_groups)
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
                groups = await Database.get_active_groups()
                selected_titles = [
                    group['title'] for group in groups 
                    if group['id'] in selected_groups
                ]
                
                success_message = (
                    f"‚úÖ –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                    f"üìã –ì—Ä—É–ø–ø—ã ({len(selected_groups)}):\n"
                    f"{chr(10).join('‚Ä¢ ' + title for title in selected_titles)}"
                )
                
                await callback.message.edit_text(success_message)
                await list_bulk_groups(callback.message)
                await state.clear()
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø", show_alert=True)
                await state.clear()
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@dp.callback_query(lambda c: c.data == "confirm_edit_accounts")
async def confirm_edit_accounts(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        if not data:
            logger.error("–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await state.clear()
            return

        post_id = data.get('edit_post_id')
        selected_accounts = data.get('selected_accounts', [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ post_id
        if not post_id:
            logger.error("post_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if not selected_accounts:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        post = await Database.get_automated_post_by_id(post_id)
        if not post:
            logger.error(f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            success = await Database.update_automated_post(post_id, accounts=selected_accounts)
            
            if success:
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}. –ù–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {selected_accounts}")
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–æ—Å—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                await callback.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", show_alert=True)
                await auto_post_menu(callback)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
                await state.clear()
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(db_error)}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=True)
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith('select_edit_group_'))
async def select_edit_group(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ callback data
        group_id = int(callback.data.split('_')[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        if not data:
            logger.error("–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await state.clear()
            return
            
        post_id = data.get('edit_post_id')
        if not post_id:
            logger.error("post_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
            
        selected_groups = data.get('selected_groups', []).copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞
        if group_id in selected_groups:
            selected_groups.remove(group_id)
        else:
            selected_groups.append(group_id)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await state.update_data(selected_groups=selected_groups)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        groups = await Database.get_active_groups()
        if not groups:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", show_alert=True)
            await state.clear()
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if group['id'] in selected_groups else '‚≠ïÔ∏è'} {group['title']}",
                        callback_data=f"select_edit_group_{group['id']}"
                    )
                ] for group in groups
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                        callback_data="confirm_edit_groups"
                    ),
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"auto_post_menu_{post_id}"
                    )
                ]
            ]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ—Å—Ç–∞\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_groups)}",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except ValueError as ve:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID –≥—Ä—É–ø–ø—ã: {str(ve)}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã", show_alert=True)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã", show_alert=True)
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith('select_edit_account_'))
async def select_edit_account(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback data
        account_id = int(callback.data.split('_')[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        if not data:
            logger.error("–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await state.clear()
            return
            
        post_id = data.get('edit_post_id')
        if not post_id:
            logger.error("post_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
            
        selected_accounts = data.get('selected_accounts', []).copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        if account_id in selected_accounts:
            selected_accounts.remove(account_id)
        else:
            selected_accounts.append(account_id)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await state.update_data(selected_accounts=selected_accounts)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = await Database.get_active_accounts()
        if not accounts:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
            await state.clear()
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if account['id'] in selected_accounts else '‚≠ïÔ∏è'} {account['phone']}",
                        callback_data=f"select_edit_account_{account['id']}"
                    )
                ] for account in accounts
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
                        callback_data="confirm_edit_accounts"
                    ),
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"auto_post_menu_{post_id}"
                    )
                ]
            ]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_accounts)}",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except ValueError as ve:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞: {str(ve)}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)
        await state.clear()

@dp.message(lambda m: m.text not in [
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É",
    "üìã –°–ø–∏—Å–æ–∫ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø",
    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É",
    "‚ùå –£–¥–∞–ª–∏—Ç—å –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É",
    "‚óÄÔ∏è –ù–∞–∑–∞–¥"
])
async def invalid_bulk_groups_input(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if not current_state or not current_state.startswith('GroupStates:'):
        return
        
    # –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã
    if current_state == 'GroupStates:waiting_for_bulk_group_name':
        if len(message.text.strip()) < 3 or len(message.text.strip()) > 50:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
            return
            
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø
    await bulk_groups_menu(message, state)

@dp.callback_query(GroupStates.waiting_for_bulk_group_selection, lambda c: c.data == "confirm_bulk_group_selection")
async def confirm_bulk_group_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_groups = data.get('selected_groups', [])
        name = data.get('bulk_group_name')
        
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã '{name}' —Å –≥—Ä—É–ø–ø–∞–º–∏: {selected_groups}")
        
        if not selected_groups:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—É
        bulk_group_id = await Database.add_bulk_group(name, selected_groups)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ —Å ID {bulk_group_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        groups = await Database.get_active_groups()
        selected_titles = [
            group['title'] for group in groups 
            if group['id'] in selected_groups
        ]
        
        success_message = (
            f"‚úÖ –û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìã –ì—Ä—É–ø–ø—ã ({len(selected_groups)}):\n"
            f"{chr(10).join('‚Ä¢ ' + title for title in selected_titles)}"
        )
        
        await callback.message.edit_text(success_message)
        logger.info(f"–û–ø—Ç–æ–º–≥—Ä—É–ø–ø–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å {len(selected_groups)} –≥—Ä—É–ø–ø–∞–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø
        await list_bulk_groups(callback.message)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã", show_alert=True)
        await state.clear()

@dp.callback_query(GroupStates.waiting_for_bulk_group_selection, lambda c: c.data.startswith('select_bulk_group_'))
async def select_bulk_group_for_edit(callback: types.CallbackQuery, state: FSMContext):
    try:
        group_id = int(callback.data.split('_')[3])
        logger.info(f"–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã {group_id} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        selected_groups = data.get('selected_groups', [])
        bulk_group_name = data.get('bulk_group_name', '')
        edit_bulk_group_id = data.get('edit_bulk_group_id')
        
        if not edit_bulk_group_id:
            logger.error("ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞
        if group_id in selected_groups:
            selected_groups.remove(group_id)
            logger.info(f"–ì—Ä—É–ø–ø–∞ {group_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        else:
            selected_groups.append(group_id)
            logger.info(f"–ì—Ä—É–ø–ø–∞ {group_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await state.update_data(selected_groups=selected_groups)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        groups = await Database.get_active_groups()
        if not groups:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±–æ—Ä–∞")
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"{'‚úÖ' if group['id'] in selected_groups else '‚≠ïÔ∏è'} {group['title']}",
                        callback_data=f"select_bulk_group_{group['id']}"
                    )
                ] for group in groups
            ] + [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                        callback_data="confirm_bulk_group_edit"
                    )
                ]
            ]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–æ–º–≥—Ä—É–ø–ø—ã '{bulk_group_name}'\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_groups)} –≥—Ä—É–ø–ø",
            reply_markup=keyboard
        )
        
        await callback.answer()
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID –≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã", show_alert=True)

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    asyncio.create_task(check_scheduled_posts())
    asyncio.create_task(check_automated_posts())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    logger.add("logs/bot.log", rotation="1 MB")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main()) 